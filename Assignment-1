Q1.What is the difference between Compiler and Interpreter ?
Compiler
1.Compiler takes an entire program at a time.
2.Compiler generates intermediate object code.
3.Compiler works fast.
4.Compiler display all errors after compilation, all at the same time.

Interpreter 
1.Interpreter takes a single line of code at a time.
2.Interpreter does not generate intermediate object code.
3.Interpreter works slower comparatively.
4.Interpreter displays errors of each line one by one.

Q2.What is the difference between JDK, JRE, and JVM?
All three JDK, JRE and JVM are interdependent
JVM (Java Virtual Machine)
It is basically specification that provides a runtime environment in which Java byte code can be executed
It is responsible for converting Byte code to the machine specific code.
The JVM performs the mentioned tasks: Loads code, Verifies code, Executes code, Provides runtime environment.
JVM is platform independent.

JRE
Like of JDK JRE is also platform dependent.
JRE = Java Virtual Machine (JVM) + Libraries to run the application

JDK
JDK is platform dependent.
JDK = Java Runtime Environment (JRE) + Development tools

Q3.How many types of memory areas are allocated by JVM?
JVM (Java Virtual Machine)
The memory in the JVM is divided into 5 different parts:
Class(Method) Area
Heap
Stack
Program Counter Register
Native Method Stack

1. Class (Method) Area
The class method area is the memory block that stores the class code, variable code(static variable, runtime constant), method code, and the constructor of a Java program.
It stores class-level data of every class such as the runtime constant pool, field and method data, the code for methods.

2. Heap
The Heap area is the memory block where objects are created or objects are stored.
Heap memory allocates memory for class interfaces and arrays (an array is an object). 
It is used to allocate memory to objects at run time

3. Stack 
Each thread has a private JVM stack, created at the same time as the thread. 
It is used to store data and partial results which will be needed while returning value for method and performing dynamic linking.
Java Stack stores frames and a new frame is created each time at every invocation of the method.
A frame is destroyed when its method invocation completes

4. Program Counter Register: 
Each JVM thread that carries out the task of a specific method has a program counter register associated with it. 
The non-native method has a PC that stores the address of the available JVM instruction whereas, in a native method, the value of the program counter is undefined. 
PC register is capable of storing the return address on some specific platform.

5. Native method Stacks: 
Also called C stacks, native method stacks are not written in Java language. 
This memory is allocated for each thread when itâ€™s created And it can be of a fixed or dynamic nature.

Q4.What is JIT compiler?
Bytecode is one of the most important features of java that aids in
cross-platform executiom. The way of converting bytecode to native 
machine language for execution has a huge impact on its speed of it.
These bytecodes have to be interpreted or compiled to proper machine
instruction depending on the instruction set architecture. Moreover
these can be directly execution 

Q5.What are the various access specifiers in Java?

There are four types of Java access modifiers:

Private: The access level of a private modifier is only within the class. 
	It cannot be accessed from outside the class.
Default: The access level of a default modifier is only within the package. It cannot be accessed from outside the package. 
	If you do not specify any access level, it will be the default.
Protected: The access level of a protected modifier is within the package and outside the package through child class. 
	If you do not make the child class, it cannot be accessed from outside the package.
Public: The access level of a public modifier is everywhere. 
	It can be accessed from within the class, outside the class, within the package and outside the package.

Q6.What is a compiler in Java?
A Java compiler is a program that takes the text file work of a developer and compiles it into a platform-independent Java file.
Java compilers include the Java Programming Language Compiler (javac).

Q7.Explain the types of variables in Java?
Types of Variables
There are three types of variables in Java:

local variable
A variable declared inside the body of the method is called local variable. 
You can use this variable only within that method and the other methods in the class aren't even aware that the variable exists.
A local variable cannot be defined with "static" keyword.

Instance variable
A variable declared inside the class but outside the body of the method, is called an instance variable.
It is not declared as static.

static variable
A variable that is declared as static is called a static variable. It cannot be local.
You can create a single copy of the static variable and share it among all the instances of the class.
Memory allocation for static variables happens only once when the class is loaded in the memory.

Q8.What are the Datatypes in Java?
Primitive data types -
 byte , short , int , long , float , double , boolean and char. 
Non-primitive data types - such as String , Arrays and Classes 

Q9.What are the identifiers in java?
Identifiers in Java are symbolic names used for identification. 
They can be a class name, variable name, method name, package name, constant name, and more. 
However, In Java, There are some reserved words that can not be used as an identifier.

Q10.Explain the architecture of JVM 
A specification where working of Java Virtual Machine is specified. 
But implementation provider is independent to choose the algorithm. 
Its implementation has been provided by Oracle and other companies.

An implementation Its implementation is known as JRE (Java Runtime Environment).
Runtime Instance Whenever you write java command on the command prompt to run the java class, an instance of JVM is created.
